{"ast":null,"code":"import css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport const OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n/**\r\n * Manages a stack of Modals as well as ensuring\r\n * body scrolling is is disabled and padding accounted for\r\n */\n\nclass ModalManager {\n  constructor() {\n    let {\n      ownerDocument,\n      handleContainerOverflow = true,\n      isRTL = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n    this.ownerDocument = ownerDocument;\n  }\n  getScrollbarWidth() {\n    return getBodyScrollbarWidth(this.ownerDocument);\n  }\n  getElement() {\n    return (this.ownerDocument || document).body;\n  }\n  setModalAttributes(_modal) {// For overriding\n  }\n  removeModalAttributes(_modal) {// For overriding\n  }\n  setContainerStyle(containerState) {\n    const style = {\n      overflow: 'hidden'\n    }; // we are only interested in the actual `style` here\n    // because we will override it\n\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const container = this.getElement();\n    containerState.style = {\n      overflow: container.style.overflow,\n      [paddingProp]: container.style[paddingProp]\n    };\n    if (containerState.scrollBarWidth) {\n      // use computed style, here to get the real padding\n      // to add our scrollbar width\n      style[paddingProp] = `${parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth}px`;\n    }\n    container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n    css(container, style);\n  }\n  reset() {\n    [...this.modals].forEach(m => this.remove(m));\n  }\n  removeContainerStyle(containerState) {\n    const container = this.getElement();\n    container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n    Object.assign(container.style, containerState.style);\n  }\n  add(modal) {\n    let modalIdx = this.modals.indexOf(modal);\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n    modalIdx = this.modals.length;\n    this.modals.push(modal);\n    this.setModalAttributes(modal);\n    if (modalIdx !== 0) {\n      return modalIdx;\n    }\n    this.state = {\n      scrollBarWidth: this.getScrollbarWidth(),\n      style: {}\n    };\n    if (this.handleContainerOverflow) {\n      this.setContainerStyle(this.state);\n    }\n    return modalIdx;\n  }\n  remove(modal) {\n    const modalIdx = this.modals.indexOf(modal);\n    if (modalIdx === -1) {\n      return;\n    }\n    this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\n    // clean up the container\n\n    if (!this.modals.length && this.handleContainerOverflow) {\n      this.removeContainerStyle(this.state);\n    }\n    this.removeModalAttributes(modal);\n  }\n  isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  }\n}\nexport default ModalManager;","map":{"version":3,"names":["css","dataAttr","getBodyScrollbarWidth","OPEN_DATA_ATTRIBUTE","ModalManager","constructor","ownerDocument","handleContainerOverflow","isRTL","modals","getScrollbarWidth","getElement","document","body","setModalAttributes","_modal","removeModalAttributes","setContainerStyle","containerState","style","overflow","paddingProp","container","scrollBarWidth","parseInt","setAttribute","reset","forEach","m","remove","removeContainerStyle","removeAttribute","Object","assign","add","modal","modalIdx","indexOf","length","push","state","splice","isTopModal"],"sources":["C:/Users/문동욱/바탕 화면/wapproject/owner/storeowner/2022_2_WAP_WEB_TEAM7/node_modules/@restart/ui/esm/ModalManager.js"],"sourcesContent":["import css from 'dom-helpers/css';\r\nimport { dataAttr } from './DataKey';\r\nimport getBodyScrollbarWidth from './getScrollbarWidth';\r\nexport const OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\r\n/**\r\n * Manages a stack of Modals as well as ensuring\r\n * body scrolling is is disabled and padding accounted for\r\n */\r\n\r\nclass ModalManager {\r\n  constructor({\r\n    ownerDocument,\r\n    handleContainerOverflow = true,\r\n    isRTL = false\r\n  } = {}) {\r\n    this.handleContainerOverflow = handleContainerOverflow;\r\n    this.isRTL = isRTL;\r\n    this.modals = [];\r\n    this.ownerDocument = ownerDocument;\r\n  }\r\n\r\n  getScrollbarWidth() {\r\n    return getBodyScrollbarWidth(this.ownerDocument);\r\n  }\r\n\r\n  getElement() {\r\n    return (this.ownerDocument || document).body;\r\n  }\r\n\r\n  setModalAttributes(_modal) {// For overriding\r\n  }\r\n\r\n  removeModalAttributes(_modal) {// For overriding\r\n  }\r\n\r\n  setContainerStyle(containerState) {\r\n    const style = {\r\n      overflow: 'hidden'\r\n    }; // we are only interested in the actual `style` here\r\n    // because we will override it\r\n\r\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\r\n    const container = this.getElement();\r\n    containerState.style = {\r\n      overflow: container.style.overflow,\r\n      [paddingProp]: container.style[paddingProp]\r\n    };\r\n\r\n    if (containerState.scrollBarWidth) {\r\n      // use computed style, here to get the real padding\r\n      // to add our scrollbar width\r\n      style[paddingProp] = `${parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth}px`;\r\n    }\r\n\r\n    container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\r\n    css(container, style);\r\n  }\r\n\r\n  reset() {\r\n    [...this.modals].forEach(m => this.remove(m));\r\n  }\r\n\r\n  removeContainerStyle(containerState) {\r\n    const container = this.getElement();\r\n    container.removeAttribute(OPEN_DATA_ATTRIBUTE);\r\n    Object.assign(container.style, containerState.style);\r\n  }\r\n\r\n  add(modal) {\r\n    let modalIdx = this.modals.indexOf(modal);\r\n\r\n    if (modalIdx !== -1) {\r\n      return modalIdx;\r\n    }\r\n\r\n    modalIdx = this.modals.length;\r\n    this.modals.push(modal);\r\n    this.setModalAttributes(modal);\r\n\r\n    if (modalIdx !== 0) {\r\n      return modalIdx;\r\n    }\r\n\r\n    this.state = {\r\n      scrollBarWidth: this.getScrollbarWidth(),\r\n      style: {}\r\n    };\r\n\r\n    if (this.handleContainerOverflow) {\r\n      this.setContainerStyle(this.state);\r\n    }\r\n\r\n    return modalIdx;\r\n  }\r\n\r\n  remove(modal) {\r\n    const modalIdx = this.modals.indexOf(modal);\r\n\r\n    if (modalIdx === -1) {\r\n      return;\r\n    }\r\n\r\n    this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\r\n    // clean up the container\r\n\r\n    if (!this.modals.length && this.handleContainerOverflow) {\r\n      this.removeContainerStyle(this.state);\r\n    }\r\n\r\n    this.removeModalAttributes(modal);\r\n  }\r\n\r\n  isTopModal(modal) {\r\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\r\n  }\r\n\r\n}\r\n\r\nexport default ModalManager;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}